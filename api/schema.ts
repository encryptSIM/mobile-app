/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/airalo/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Obtain an Airalo access token
         * @description Retrieves an access token from the Airalo API using client credentials. This token is required for subsequent authenticated requests to the Airalo API.
         *
         */
        get: operations["getAiraloToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/create-device": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create VPN device
         * @description Create a new VPN device and return device information
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Device created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["DeviceInfo"];
                        };
                    };
                };
                /** @description Failed to create device */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/countries/{deviceToken}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available countries
         * @description Retrieve list of available countries for VPN connection
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Device token from device creation */
                    deviceToken: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Countries retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["Country"][];
                        };
                    };
                };
                /** @description No countries found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to get countries */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/cities/{countryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get cities in a country
         * @description Retrieve list of cities available in a specific country
         */
        get: {
            parameters: {
                query: {
                    /** @description Device token */
                    deviceToken: string;
                };
                header?: never;
                path: {
                    /** @description Country ID */
                    countryId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Cities retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["City"][];
                        };
                    };
                };
                /** @description Missing deviceToken */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description No cities found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to get cities */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/servers/{cityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get servers in a city
         * @description Retrieve list of VPN servers available in a specific city
         */
        get: {
            parameters: {
                query: {
                    /** @description Device token */
                    deviceToken: string;
                };
                header?: never;
                path: {
                    /** @description City ID */
                    cityId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Servers retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            data?: components["schemas"]["Server"][];
                        };
                    };
                };
                /** @description Missing deviceToken */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description No servers found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to get servers */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/create-credentials/{serverId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create server credentials
         * @description Create VPN credentials for a specific server
         */
        post: {
            parameters: {
                query: {
                    /** @description Device token */
                    deviceToken: string;
                };
                header?: never;
                path: {
                    /** @description Server ID */
                    serverId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Credentials created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            credentials?: components["schemas"]["Credentials"];
                            /** @description WireGuard configuration text */
                            config?: string;
                        };
                    };
                };
                /** @description Missing deviceToken */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to create credentials */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vpn/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Get complete VPN configuration
         * @description Create device and get random VPN configuration ready to use
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description VPN configuration created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            deviceToken?: string;
                            raw?: components["schemas"]["Credentials"];
                            /** @description Complete WireGuard configuration */
                            configWireGuard?: string;
                        };
                    };
                };
                /** @description No countries, cities, or servers found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to get VPN configuration */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/create-payment-profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create payment profile
         * @description Create a new Solana wallet-based payment profile
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Payment profile created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Public key of the created wallet */
                            publicKey?: string;
                        };
                    };
                };
                /** @description Failed to create payment profile */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create order
         * @description Create a new SIM order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateOrderRequest"];
                };
            };
            responses: {
                /** @description Order created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"];
                    };
                };
                /** @description Failed to create order */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/add-order": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add order
         * @description Add an additional order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["AddOrderRequest"];
                };
            };
            responses: {
                /** @description Order added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderResponse"];
                    };
                };
                /** @description Failed to add order */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/order/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query order status
         * @description Get the current status of an order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Order status retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderStatus"];
                    };
                };
                /** @description Order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to query order */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create topup order
         * @description Create a new SIM topup order
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateTopupRequest"];
                };
            };
            responses: {
                /** @description Topup order created successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TopupResponse"];
                    };
                };
                /** @description Failed to create topup order */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/topup/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query topup order status
         * @description Get the current status of a topup order
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Topup order ID */
                    orderId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Topup order status retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TopupStatus"];
                    };
                };
                /** @description Topup order not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to query topup order */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-profile/topup/{ppPublicKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query payment profile topup orders
         * @description Get topup orders for a specific payment profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment profile public key */
                    ppPublicKey: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Payment profile topup orders retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TopupStatus"][];
                    };
                };
                /** @description Failed to query payment profile topup orders */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/payment-profile/sim/{ppPublicKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Query payment profile SIM orders
         * @description Get SIM orders for a specific payment profile
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Payment profile public key */
                    ppPublicKey: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Payment profile SIM orders retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["OrderStatus"][];
                    };
                };
                /** @description Failed to query payment profile SIM orders */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sim/{iccid}/topups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get available topup packages for SIM
         * @description Retrieve available topup packages for a specific SIM card
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description SIM card ICCID */
                    iccid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Topup packages retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TopupPackage"][];
                    };
                };
                /** @description Missing required parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to retrieve SIM top-ups */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sim/{iccid}/usage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get SIM data usage
         * @description Retrieve data usage information for a specific SIM card
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description SIM card ICCID */
                    iccid: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Usage data retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["UsageData"];
                    };
                };
                /** @description Missing required parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Failed to retrieve SIM usage */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/packages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get packages by type
         * @description Retrieve packages filtered by type (local, global, or regional)
         */
        get: {
            parameters: {
                query: {
                    /** @description Type of packages to retrieve */
                    type: "local" | "global" | "regional";
                    /** @description Country code for filtering packages */
                    country?: "AU" | "CN" | "JP" | "KR" | "IN" | "SG" | "NZ" | "US" | "GB" | "DE" | "FR" | "IT" | "CA" | "RU" | "BR" | "ZA" | "VN" | "PH" | "TH" | "MY" | "ID" | "HK" | "TW" | "NP" | "VU" | "WS" | "FI" | "SE" | "CH" | "MX" | "AR" | "EG" | "ES" | "PT" | "PL" | "TR" | "QA" | "SA";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Region"][];
                    };
                };
                /** @description Bad request - invalid type parameter */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/error": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log error
         * @description Log errors from frontend or other sources
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description Error message to log */
                        message?: string;
                    };
                };
            };
            responses: {
                /** @description Error logged successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
                /** @description Failed to process log request */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example false */
                            success?: boolean;
                            /** @example Failed to process log request */
                            message?: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Check if the API is running
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description API is healthy */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        DeviceInfo: {
            /** @description Device token for authentication */
            token?: string;
            /** @description Device ID */
            id?: string;
        };
        Country: {
            /** @description Country ID */
            id?: string;
            /** @description Country name */
            name?: string;
            /** @description Country code */
            code?: string;
        };
        City: {
            /** @description City ID */
            id?: string;
            /** @description City name */
            name?: string;
            /** @description Parent country ID */
            countryId?: string;
        };
        Server: {
            /** @description Server ID */
            id?: string;
            /** @description Server name */
            name?: string;
            /** @description Parent city ID */
            cityId?: string;
        };
        Credentials: {
            /** @description Server credentials data */
            data?: Record<string, never>;
        };
        CreateOrderRequest: {
            /** @description Package ID to order */
            packageId: string;
            /** @description Payment profile public key */
            ppPublicKey: string;
        };
        AddOrderRequest: {
            /** @description Package ID to add */
            packageId: string;
            /** @description Payment profile public key */
            ppPublicKey: string;
        };
        OrderResponse: {
            /** @description Created order ID */
            orderId?: string;
            /** @description Order status */
            status?: string;
        };
        OrderStatus: {
            /** @description Order ID */
            orderId?: string;
            /** @description Current order status */
            status?: string;
            /** @description Package ID */
            packageId?: string;
            /** @description Payment profile public key */
            ppPublicKey?: string;
        };
        CreateTopupRequest: {
            /** @description SIM card ICCID */
            iccid: string;
            /** @description Topup package ID */
            topupPackageId: string;
            /** @description Payment profile public key */
            ppPublicKey: string;
        };
        TopupResponse: {
            /** @description Created topup order ID */
            orderId?: string;
            /** @description Topup order status */
            status?: string;
        };
        TopupStatus: {
            /** @description Topup order ID */
            orderId?: string;
            /** @description Current topup status */
            status?: string;
            /** @description SIM card ICCID */
            iccid?: string;
            /** @description Topup package ID */
            topupPackageId?: string;
        };
        TopupPackage: {
            /** @description Topup package ID */
            id?: string;
            /** @description Package price */
            price?: number;
            /** @description Data allowance */
            data?: string;
            /** @description Package validity in days */
            validity?: number;
        };
        UsageData: {
            /** @description Data used in MB */
            used?: number;
            /** @description Data remaining in MB */
            remaining?: number;
            /** @description Total data allowance in MB */
            total?: number;
        };
        Region: {
            /**
             * @description Region identifier
             * @example europe
             */
            region: string;
            operators: components["schemas"]["Operator"][];
        };
        Operator: {
            /**
             * @description Unique operator identifier
             * @example 1031
             */
            id: number;
            /**
             * @description Operator name
             * @example Eurolink
             */
            title: string;
            packages: components["schemas"]["Package"][];
        };
        Package: {
            /**
             * @description Unique package identifier
             * @example eurolink-10days-unlimited
             */
            id: string;
            /**
             * @description Package price
             * @example 35
             */
            price: number;
            /**
             * @description Package duration in days
             * @example 10
             */
            day: number;
            /**
             * @description Data allowance
             * @example Unlimited
             */
            data: string;
        };
        Error: {
            /** @example Bad Request */
            error: string;
            /** @example Invalid parameter */
            message?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAiraloToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Airalo token obtained successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /**
                             * @description Type of the token (e.g., "Bearer")
                             * @example Bearer
                             */
                            token_type: string;
                            /**
                             * @description Lifetime of the access token in seconds (e.g., 86400 seconds = 24 hours)
                             *
                             * @example 86400
                             */
                            expires_in: number;
                            /**
                             * @description The access token to be used in subsequent requests
                             * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                             */
                            access_token: string;
                        };
                        meta: {
                            /** @example success */
                            message: string;
                        };
                    };
                };
            };
            /** @description Internal server error or Airalo API error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description A message describing the error
                         * @example Failed to obtain Airalo token
                         */
                        error?: string;
                        /**
                         * @description More specific error details from the Airalo API or server
                         * @example Airalo client ID or secret not configured in environment variables.
                         */
                        details?: string;
                    };
                };
            };
        };
    };
}
